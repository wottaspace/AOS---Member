# This is a basic workflow to help you get started with Actions

name: Build APK

# Controls when the workflow will run
on:
  push:
    tags:
      - "v*.*.*"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - uses: subosito/flutter-action@v1.5.3
        with:
          flutter-version: "2.2.1"

      - name: Create the Keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
            # import keystore from secrets
            echo $KEYSTORE_BASE64 | base64 -d > $RUNNER_TEMP/release.keystore

      - name: Sign Android App Bundle
        run: jarsigner -keystore $RUNNER_TEMP/release.keystore -storepass $ -keypass $ -sigalg SHA256withRSA -digestalg SHA-256 -signedjar build/app/outputs/bundle/release/app-release-signed.aab build/app/outputs/bundle/release/*.aab releaseKey
      - name: Decoding android/key.properties
        run: echo "${{ secrets.KEYPROP_PROD }}" | base64 --decode > android/key.properties

      - name: Decoding android/neumodore_key.jks
        run: echo "${{ secrets.KEYJKS_PROD }}" | base64 --decode > android/key.jks

      - run: flutter pub get
      - run: flutter build apk --release
      - run: flutter build appbundle --release
      - run: flutter build ios --release --no-codesign

      - name: Publish Android Artefacts
        uses: actions/upload-artifact@v1
        with:
          name: release-apk
          path: build/app/outputs/apk/release/*.apk
